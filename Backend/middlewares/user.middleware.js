let yup = require('yup');
const jwt = require('jsonwebtoken');

var db=require('../models');
var User = db.user;
const { Op } = require("sequelize");


//Teljes n√©v
//Email c√≠m
//Jelsz√≥
let schemaSignup = yup.object().shape({
	fullName: yup
		.string()
		.required('Teljes n√©v megad√°sa k√∂telez≈ë!'),
	email: yup
		.string()
		.required('Email-c√≠m megad√°sa k√∂telez≈ë')
		.email('√ârv√©nyteken email-c√≠m form√°tum'),
	password: yup
		.string()
		.required('√öj jelsz√≥ megad√°sa k√∂telez≈ë')
		.min(6, 'Jelsz√≥nak minimum 6 karakternek kell lennie'),
});
//Ez valid√°lja
validationSignup = (req, res, next) => {
	
	console.log('üêû validationSignup');

	schemaSignup
		.validate(
			{
                fullName: req.body.fullName,
				email: req.body.email,
				password: req.body.password,
			},
			{ abortEarly: false }
		)
		.then(function () {
			next();
		})
		.catch(function (err) {
            return res.status(400).json({ error: err });
			
		});
};
//Regisztr√°lt e m√°r?
isUserExistsSignup = async (req, res, next) => {
	console.log('üêû isUserExistsSignup');

	try {
		const user = await User.findOne({
			where: {
				email: req.body.email,
			},
		});

		if (user) {
			const error = {
                message: 'Felhaszn√°l√≥ m√°r regisztr√°lt',
                field: 'email' 
            };
            return res.status(409).json({ error});
		}

		next();
	} catch (err) {
        return res.status(400).json({ error: err });
	}
};












let schemaLogin = yup.object().shape({
	email: yup
		.string()
		.required('Email-c√≠m megad√°sa k√∂telez≈ë')
		.email('K√©rlek √©rv√©nyes email-c√≠met adj meg'),
	password: yup
		.string()
		.required('Jelsz√≥ megad√°sa k√∂telez≈ë')
		.min(6, 'K√©rlek jelsz√≥ minimum 6 karakter'),
});
validateLogin = (req, res, next) => {
	console.log('üêû Bejelentkez√©s valid√°l√°sa');

	schemaLogin
		.validate(
			{
				email: req.body.email,
				password: req.body.password,
			},
			{ abortEarly: false }
		)
		.then(function () {
			next();
		})
		.catch(function (err) {
			return res.status(400).json({ error: err });
		});
};
authenticateToken = (req, res, next) => {
	var token = req.headers.authorization;
	if (token) {
		
		jwt.verify(
			token.replace(/^Bearer\s/, ''),
			process.env.AUTH_SECRET,
			(err, decoded) => {
				if (err) {
                    const error = {
                        message: '√ârv√©nytelen felhaszn√°l√≥',
                        field: 'login' 
                    };
                    return res.status(401).json({ error});
				} else {
					req.user = decoded;
					return next();
				}
			}
		);
	} else {
		const error = {
            message: '√ârv√©nytelen felhaszn√°l√≥',
            field: 'login' 
        };
        return res.status(401).json({ error});
	}
};




let schemaUpdateProfile = yup.object().shape({
	fullName: yup.string().required('K√©rlek √≠rdd be a teljes neved'),
    email: yup
    .string()
    //.required()
    .required('K√©rlek √≠rd be az email-c√≠medet')
    .email('K√©rlek √©rv√©nyes email-c√≠met adj meg'),
});
validationUpdateProfile = (req, res, next) => {
	
	console.log('üêû validationUpdateProfile');

	schemaUpdateProfile
		.validate(
			{
				fullName: req.body.fullName,
                email: req.body.email,
			},
			{ abortEarly: false }
		)
		.then(function () {
			next();
		})
		.catch(function (err) {
            return res.status(404).json({ err});
		});
};
isUserExistsUpdate = async (req, res, next) => {
	console.log('üêû isUserExistsUpdate');

	try {
		const user = await User.findOne({
			where: {
				email: req.body.email,
				id: {
					[Op.ne]: req.user.id,
				},
			},
		});

		if (user) {
            const error = {
                message: 'Ezzel az email-c√≠mmel m√°r regisztr√°ltak',
                field: 'email' 
            };

            return res.status(409).json({ error});   
		}

		next();
	} catch (err) {
		return next(err);
	}
};


















let schemaForgotPassword = yup.object().shape({
	email: yup
		.string()
		.required('K√©rlek √≠rdd be a regisztr√°lt email-c√≠medet')
		.email('K√©rlek √≠rdd be az √©rv√©nyes email-c√≠medet'),
});
validationForgotPassword = (req, res, next) => {



	console.log('üêû validationForgotPassword');

	schemaForgotPassword
		.validate(
			{
				email: req.body.email,
			},
			{ abortEarly: false }
		)
		.then(function () {
			next();
		})
		.catch(function (err) {
			return res.status(400).json({ error: err });
		});
};


let schemaChangePassword = yup.object().shape({

	newPassword: yup
		.string()
		.required('K√©rlek √≠rdd be az √∫j jelsz√≥t')
		.min(6, 'K√©rlek jelsz√≥ minimum 6 karakter'),
	confirmPassword: yup
		.string()
		.required('K√©rlek er≈ës√≠tsd meg az √∫j email-c√≠medet')
		.min(6, 'K√©rlek jelsz√≥ minimum 6 karakter')
		.oneOf(
			[yup.ref('newPassword'), null],
			'Az √∫j jelsz√≥ √©s meger≈ës√≠t√©se nem egyezik'
		),
});
validationChangePassword = (req, res, next) => {
	
	console.log('üêû validationChangePassword');

	schemaChangePassword
		.validate(
			{
				newPassword: req.body.newPassword,
				confirmPassword: req.body.confirmPassword,
			},
			{ abortEarly: false }
		)
		.then(function () {
			next();
		})
		.catch(function (err) {
            return res.status(400).json({ err});
		});
};


isEmailRegistered = async (req, res, next) => {



	
	console.log('üêû isEmailRegistered');

	try {
		const user = await User.findOne({
			where: {
				email: req.body.email,
			},
		});

		if (user) {
			next();
		} else {
            const error = {
                message: 'Nincs felhaszn√°l√≥ regisztr√°lva ezzel az email-c√≠mmel',
                field: 'email' 
            };
            return res.status(404).json({ error});
		}
	} catch (err) {
		return next(err);
	}
};





let schemaResetPassword = yup.object().shape({
	newPassword: yup
		.string()
		.required('K√©rlek √≠rj be egy √∫j jelsz√≥t')
		.min(6, 'K√©rlek jelsz√≥ minimum 6 karakter'),
	confirmPassword: yup
		.string()
		.required('K√©rlek ism√©teld meg az √∫j jelsz√≥t')
		.min(6, 'K√©rlek jelsz√≥ minimum 6 karakter')
		.oneOf(
			[yup.ref('newPassword'), null],
			'Az √∫j jelsz√≥ √©s a meger≈ës√≠t√©se nem egyezik'
		),
	token: yup.string().required('Jelsz√≥ vissza√°ll√≠t√≥ token nem l√©tezik'),
});
validationResetPassword = (req, res, next) => {

	console.log('üêû validationResetPassword');

	schemaResetPassword
		.validate(
			{
				newPassword: req.body.newPassword,
				confirmPassword: req.body.confirmPassword,
				token: req.body.token,
			},
			{ abortEarly: false }
		)
		.then(function () {
			next();
		})
		.catch(function (err) {
            return res.status(400).json({ err});
		});
};
isResetTokenValid = async (req, res, next) => {
	
	console.log('üêû isResetTokenValid');

	try {
		const user = await User.findOne({
			where: {
				token: req.body.token,
			},
		});

		if (user) {
			next();
		} else {
            const error = {
                message: '√ârv√©nytelen link vagy token',
                field: 'email' 
            };
            return res.status(400).json({ error});
		}
	} catch (err) {
		return next(err);
	}
};







module.exports = {
    validationSignup,
    isUserExistsSignup,
    validateLogin,
    authenticateToken,
    validationUpdateProfile,
    isUserExistsUpdate,
    validationChangePassword,
    validationForgotPassword,
    isEmailRegistered,
    validationResetPassword,
    isResetTokenValid
}